import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import SignOut from "@/components/SignOut";
import SideBar from "@/components/SideBar";
import { useSession } from "next-auth/react";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import checkStatus from "@/utils/checkStatus";
import axios from "axios";
import Chat from "@/components/Chat";
import { getServerSession } from "next-auth";
import { authOptions } from "./api/auth/[...nextauth]";

import io from "socket.io-client";
let socket;
const inter = Inter({ subsets: ["latin"] });

export default function Home({ channelData }) {
  const [channels, setChannels] = useState(channelData);
  const [channel, setChannel] = useState(channelData[0]);
  const { data: session, status } = useSession();
  const [messages, setMessages] = useState(channelData[0]?.messages || []);
  const [newMessage, setNewMessage] = useState({});

  checkStatus();

  useEffect(() => {
    const socketInitializer = async () => {
      await fetch("/api/socket");
      socket = io();

      socket.on("connect", () => {
        console.log("connected");
      });

      socket.on("post-message", (msg) => {
        // setMessages([...messages, newMessage]);
        console.log(msg);
      });

      socket.on("new-messages", (data) => {
        setMessages(data);
        // console.log(data);
      });
    };

    socketInitializer();
  }, [session, messages]);

  function updateChat(chat) {
    if (chat.messages) {
      setChannel(chat);
      setMessages(chat.messages);
    }
  }
  async function onClick(e) {
    try {
      if (session) {
        const user_id = session.user.id;
        e.preventDefault();
        const getText = e.target.body.value;
        const getData = {
          body: getText,
          channel_id: channel.id,
          user_id,
        };

        socket.emit("new-message", getData);
        const newMsg = {
          body: getText,
          channel_id: channel.id,
          user_id,
          created_at: new Date(),
        };
        setNewMessage(newMsg);
      }
    } catch (error) {
      console.log(error);
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>Home</h1>
        <SideBar channels={channels} updateChat={updateChat} />
        {/* <Chat /> */}
        <div>
          {channel ? (
            <div>
              {/* <div>{input}</div> */}
              <div>{channel.name}</div>
              <div>{channel.description}</div>
              <div>
                {messages.map((message) => (
                  <li key={message.id}>{message.body}</li>
                ))}
              </div>
              <form onSubmit={onClick}>
                <textarea name="body" id="body" />
                <button type="submit">Send</button>
              </form>
            </div>
          ) : (
            <div> {channel.name}</div>
          )}
        </div>
        <SignOut />
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getServerSession(context.req, context.res, authOptions);
  const id = session.user ? session.user.id : null;
  console.log(id);
  let channelData = [];
  if (session) {
    const response = await fetch(
      `http://localhost:3000/api/users/${id}/channels`
    );
    channelData = await response.json();
  }
  return {
    props: {
      channelData,
    },
  };
}
