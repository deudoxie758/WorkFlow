import Head from "next/head";
import styles from "@/styles/Home.module.css";
import SignOut from "@/components/SignOut";
import SideBar from "@/components/SideBar";
import { useSession } from "next-auth/react";
import { useEffect, useState } from "react";
import checkStatus from "@/utils/checkStatus";
import { getServerSession } from "next-auth";
import { authOptions } from "./api/auth/[...nextauth]";
import io from "socket.io-client";
import SideBar2 from "@/components/SideBar2";
import NavBar from "@/components/NavBar";

let socket;

export default function Home({ channelData }) {
  const [channels, setChannels] = useState(channelData);
  const [channel, setChannel] = useState(channelData[0]);
  const { data: session, status } = useSession();
  const [messages, setMessages] = useState(channelData[0]?.messages || []);

  checkStatus();

  useEffect(() => {
    const socketInitializer = async () => {
      await fetch("/api/socket");
      socket = io();

      socket.on("connect", () => {
        console.log("connected");
      });

      socket.on("new-messages", (data) => {
        setMessages(data);
      });
    };
    socketInitializer();
  }, [session, messages]);

  function updateChat(chat) {
    if (chat.messages) {
      setChannel(chat);
      setMessages(chat.messages);
    }
  }
  async function onClick(e) {
    try {
      if (session) {
        const user_id = session.user.id;
        e.preventDefault();
        const getText = e.target.body.value;
        const getData = {
          body: getText,
          channel_id: channel.id,
          user_id,
        };
        socket.emit("new-message", getData);
        e.target.body.value = "";
      }
    } catch (error) {
      console.log(error);
    }
  }
  if (!channel) {
    return (
      <div>
        <button>Create First Channel</button>
      </div>
    );
  }
  // return (
  //   <>
  //     <Head>
  //       <title>WorkFlow</title>
  //       <meta name="description" content="Generated by create next app" />
  //       <meta name="viewport" content="width=device-width, initial-scale=1" />
  //       <link rel="icon" href="/favicon.ico" />
  //     </Head>
  //     <main className={styles.main}>
  //       <NavBar />

  //       <div className={`flex`}>
  //         <div>
  //           {/* <SideBar2 channels={channels} updateChat={updateChat} /> */}
  //           <SideBar channels={channels} updateChat={updateChat} />
  //         </div>
  //         <div>
  //           {channel ? (
  //             <div>
  //               <div>{channel.name}</div>
  //               <div>{channel.description}</div>
  //               <div>
  //                 {messages.map((message) => (
  //                   <li key={message.id}>{message.body}</li>
  //                 ))}
  //               </div>
  //               <form onSubmit={onClick}>
  //                 <textarea name="body" id="body" />
  //                 <button type="submit">Send</button>
  //               </form>
  //             </div>
  //           ) : (
  //             <div> {channel.name}</div>
  //           )}
  //         </div>
  //       </div>
  //       <SignOut />
  //     </main>
  //   </>
  // );
  return (
    <>
      <Head>
        <title>WorkFlow</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col h-screen">
        <NavBar />

        <div className="flex flex-1">
          <div className="w-1/4 border-r border-gray-400">
            <SideBar channels={channels} updateChat={updateChat} />
          </div>
          <div className="flex-1">
            {channel ? (
              <div className="flex flex-col h-screen">
                <div className="flex justify-between items-center p-4 border-b border-gray-400">
                  <div className="text-lg font-medium">{channel.name}</div>
                  <div className="text-gray-500">{channel.description}</div>
                </div>
                <div className="flex-1 p-4 overflow-y-scroll">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className="flex items-start justify-start space-x-2 mb-4"
                    >
                      <div className="flex-shrink-0">
                        <img
                          src={message.avatar}
                          alt={`${message.username}'s avatar`}
                          className="w-8 h-8 rounded-full"
                        />
                      </div>
                      <div className="flex-1">
                        <div className="text-gray-500">{message.username}</div>
                        <div className="bg-gray-200 px-4 py-2 rounded-md">
                          <div className="text-gray-800">{message.body}</div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                <form onSubmit={onClick} className="flex-none p-4">
                  <div className="flex space-x-2">
                    <img
                      src="/user-avatar.png"
                      alt="User avatar"
                      className="w-8 h-8 rounded-full"
                    />
                    <textarea
                      name="body"
                      id="body"
                      className="flex-1 border border-gray-400 rounded-md p-2"
                    />
                    <button
                      type="submit"
                      className="bg-blue-500 text-white rounded-md px-4 py-2"
                    >
                      Send
                    </button>
                  </div>
                </form>
              </div>
            ) : (
              <div className="flex-1 p-4">
                <div className="text-xl font-medium mb-4">Select a channel</div>
                <div className="text-gray-500">
                  Channels you belong to will appear here.
                </div>
              </div>
            )}
          </div>
        </div>
        <SignOut />
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getServerSession(context.req, context.res, authOptions);
  const id = session.user ? session.user.id : null;
  let channelData = [];
  if (session) {
    const response = await fetch(
      `http://localhost:3000/api/users/${id}/channels`
    );
    channelData = await response.json();
  }
  return {
    props: {
      channelData,
    },
  };
}
